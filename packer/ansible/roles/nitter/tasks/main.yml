- name: Install dependencies
  ansible.builtin.apt:
    name:
      - libpcre3
      - redis-server
    state: present

- name: Enable and start Redis
  ansible.builtin.systemd:
    name: redis-server
    enabled: true
    state: started

- name: Create user to run nitter
  ansible.builtin.user:
    name: nitter
    system: true
    shell: /usr/sbin/nologin
    create_home: false
  register: nitter_user

- name: Find the latest release of Nitter
  ansible.builtin.uri:
    url: https://api.github.com/repos/batinicaz/build-nitter/releases/latest
    return_content: true
    headers:
      Accept: "application/vnd.github.v3+json"
  register: nitter_latest_release

- name: Create nitter directory
  ansible.builtin.file:
    path: "{{ nitter_install_dir }}"
    state: directory
    mode: '0700'
    owner: "{{ nitter_user.name }}"
    group: "{{ nitter_user.group }}"

- name: Download and extract latest release
  ansible.builtin.unarchive:
    # Grab the ARM release if building locally
    src: "{{ nitter_latest_release.json.assets[nitter_use_arm | ternary(1, 0)].browser_download_url }}"
    dest: "{{ nitter_install_dir }}"
    remote_src: true
    creates: "{{ nitter_install_dir }}/nitter"
    owner: "{{ nitter_user.name }}"
    group: "{{ nitter_user.group }}"
    mode: '0755'

- name: Generate a cryptographic salt for use in configuration
  ansible.builtin.command: openssl rand -base64 32
  changed_when: true
  register: nitter_salt

- name: Set port number to use
  ansible.builtin.set_fact:
    nitter_port: "{{ 5000 + range(0, 4999) | random }}"
  until: fulltextrss_port != nitter_port
  retries: 100

- name: Set up Nitter configuration
  ansible.builtin.template:
    src: "nitter.conf.j2"
    dest: "{{ nitter_install_dir }}/nitter.conf"
    owner: "{{ nitter_user.name }}"
    group: "{{ nitter_user.group }}"
    mode: '0644'

- name: Add sessions to Nitter
  ansible.builtin.copy:
    src: sessions.jsonl.encrypted
    dest: "{{ nitter_install_dir }}/sessions.jsonl"
    decrypt: true
    owner: "{{ nitter_user.name }}"
    group: "{{ nitter_user.group }}"
    mode: '0644'

- name: Set up Nitter service
  ansible.builtin.template:
    src: "nitter.service.j2"
    dest: "/etc/systemd/system/nitter.service"
    mode: '0600'
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"

- name: Enable and start Nitter
  ansible.builtin.systemd:
    name: nitter
    enabled: true
    state: started

- name: Create Nginx config file
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "{{ nginx_confd_directory }}/nitter.conf"
    mode: '0644'
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"

- name: Restart nginx
  ansible.builtin.systemd:
    name: "{{ nginx_service_name }}"
    state: restarted
