- name: Create user to run redlib
  ansible.builtin.user:
    name: redlib
    system: true
    shell: /usr/sbin/nologin
    create_home: false
  register: redlib_user

- name: Set port number to use
  ansible.builtin.set_fact:
    redlib_port: "{{ 5000 + range(0, 4999) | random }}"
  until: fulltextrss_port != redlib_port and nitter_port != redlib_port
  retries: 100

- name: Check if redlib installed
  ansible.builtin.stat:
    path: "{{ redlib_install_dir }}/redlib"
  register: redlib_installed

- name: Example clone of a single branch
  ansible.builtin.git:
    repo: https://github.com/redlib-org/redlib
    dest: "{{ redlib_build_dir }}"
    version: main

- name: Create build dir
  ansible.builtin.file:
    path: "{{ redlib_build_dir }}"
    state: directory
    mode: '0755'
  when: not redlib_installed.stat.exists

- name: Download rust installer
  ansible.builtin.get_url:
    url: https://sh.rustup.rs
    dest: /tmp/sh.rustup.rs
    mode: '0755'
  when: not redlib_installed.stat.exists

- name: Install build dependencies
  ansible.builtin.apt:
    name: gcc
    state: present
  when: not redlib_installed.stat.exists

- name: Install rust
  ansible.builtin.command: /tmp/sh.rustup.rs -y
  when: not redlib_installed.stat.exists
  changed_when: true
  notify: "remove rust"

- name: Build redlib
  ansible.builtin.command: "{{ ansible_env.HOME }}/.cargo/bin/cargo build --release"
  when: not redlib_installed.stat.exists
  args:
    chdir: "{{ redlib_build_dir }}"
    creates: "{{ redlib_build_dir }}/target/release/redlib"

- name: Create install dir
  ansible.builtin.file:
    path: "{{ redlib_install_dir }}"
    state: directory
    mode: '0755'

- name: Add custom config
  ansible.builtin.template:
    src: redlib.conf.j2
    dest: "{{ redlib_install_dir }}/redlib.conf"
    mode: '0644'
    owner: "{{ redlib_user.name }}"
    group: "{{ redlib_user.group }}"

- name: Copy redlib to install directory
  ansible.builtin.copy:
    src: "{{ redlib_build_dir }}/target/release/redlib"
    dest: "{{ redlib_install_dir }}/redlib"
    owner: "{{ redlib_user.name }}"
    group: "{{ redlib_user.group }}"
    mode: '0644'
    remote_src: true
  when: not redlib_installed.stat.exists

- name: Set ownership of install directory
  ansible.builtin.file:
    path: "{{ redlib_install_dir }}"
    state: directory
    recurse: true
    owner: "{{ redlib_user.name }}"
    group: "{{ redlib_user.group }}"
    mode: '0755'

- name: Cleanup build
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ redlib_build_dir }}"
  when: not redlib_installed.stat.exists

- name: Remove build dependencies
  ansible.builtin.apt:
    name: gcc
    autoremove: true
    state: absent
    purge: true
  when: not redlib_installed.stat.exists

- name: Set up Redlib service
  ansible.builtin.template:
    src: "redlib.service.j2"
    dest: "/etc/systemd/system/redlib.service"
    mode: '0600'
    owner: "{{ redlib_user.name }}"
    group: "{{ redlib_user.group }}"

- name: Enable and start Redlib
  ansible.builtin.systemd:
    name: redlib
    enabled: true
    state: started

- name: Create Nginx config file
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "{{ nginx_confd_directory }}/redlib.conf"
    mode: '0644'
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"

- name: Restart nginx
  ansible.builtin.systemd:
    name: "{{ nginx_service_name }}"
    state: restarted
