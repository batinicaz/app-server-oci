- name: Install pre reqs
  ansible.builtin.apt:
    pkg:
      - php-fpm
      - php-curl
      - php-json
      - php-mbstring
      - php-mysql
      - php-xml
      - php-zip

- name: Get latest release
  ansible.builtin.uri:
    url: "https://api.github.com/repos/FreshRSS/FreshRSS/releases/latest"
    method: GET
    return_content: true
  register: freshrss_release

- name: Download latest release
  ansible.builtin.get_url:
    # checkov:skip=CKV2_ANSIBLE_2 URL is https but checkov can not tell
    url: "{{ freshrss_release.json.tarball_url }}"
    dest: "/tmp/freshrss.tar.gz"
    mode: '0644'
  register: freshrss_download

- name: Create install dir
  ansible.builtin.file:
    path: "{{ freshrss_install_dir }}"
    state: directory
    mode: '0755'

- name: Extract downloaded release
  ansible.builtin.unarchive:
    src: "{{ freshrss_download.dest }}"
    dest: "{{ freshrss_install_dir }}"
    remote_src: true
    extra_opts: "--strip-components=1"

- name: Set ownership of install directory
  ansible.builtin.file:
    path: "{{ freshrss_install_dir }}"
    state: directory
    recurse: true
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0755'

- name: Cleanup downloaded archive
  ansible.builtin.file:
    path: "{{ freshrss_download.dest }}"
    state: absent

- name: Perform first time setup
  ansible.builtin.command:
    cmd: "sudo -u {{ nginx_user }} ./cli/do-install.php --default_user {{ freshrss.user }} --auth_type form --environment production --language en --title FreshRSS --api_enabled --db-type mysql --db-host localhost:3306 --db-user freshrss --db-password {{ mysql.freshrss }} --db-base freshrss --disable_update"
    chdir: "{{ freshrss_install_dir }}"
    creates: /opt/freshrss/data/applied_migrations.txt
  no_log: true

- name: Create user
  ansible.builtin.command:
    cmd: "sudo -u {{ nginx_user }} ./cli/create-user.php --user {{ freshrss.user }} --password '{{ freshrss.password }}' --language en"
    chdir: "{{ freshrss_install_dir }}"
  no_log: true
  register: command_output
  changed_when: "'FreshRSS warning: username already exists' not in command_output.stderr"
  failed_when: "command_output.rc != 0 and 'FreshRSS warning: username already exists' not in command_output.stderr"

- name: Create log file for tracking auto refresh of feeds
  ansible.builtin.file:
    path: "/var/log/freshrss-feed-update.log"
    state: touch
    group: "{{ nginx_group }}"
    mode: '0644'
    owner: "{{ nginx_user }}"
  register: freshrss_feed_update_log

- name: Setup cronjob to auto refresh feeds
  ansible.builtin.cron:
    name: FreshRSS Feed Update
    weekday: "*"
    hour: "*"
    minute: "*/20"
    user: "{{ nginx_user }}"
    job: "php -f {{ freshrss_install_dir }}/app/actualize_script.php > {{ freshrss_feed_update_log.dest }} 2>&1 && curl -fsS -m 10 --retry 5 -o /dev/null https://hc-ping.com/b04fc65e-865e-4b96-99ff-708e243fa20c"

- name: Install extensions
  ansible.builtin.include_tasks: extensions.yml
  loop: "{{ freshrss_extensions }}"
  loop_control:
    loop_var: extension

- name: Create Nginx config file
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "{{ nginx_confd_directory }}/freshrss.conf"
    mode: '0644'
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"

- name: Restart nginx
  ansible.builtin.systemd:
    name: "{{ nginx_service_name }}"
    state: restarted

- name: Setup backups
  ansible.builtin.include_tasks: backups.yml
